<!DOCTYPE html>
<html>
<head>
    <title><%= exception_type %> at <%= request_path %> - Better Errors</title>
</head>
<body>
    <%# Stylesheets are placed in the <body> for Turbolinks compatibility. %>
    <style type='text/css'>
      <% if File.exist?(File.expand_path("templates/main.development.css", File.dirname(__FILE__))) %>
        <%== File.open(File.expand_path("templates/main.development.css", File.dirname(__FILE__))).read %>
      <% else %>
        <%== File.open(File.expand_path("templates/main.css", File.dirname(__FILE__))).read %>
      <% end %>
    </style>

    <%# IE8 compatibility crap %>
    <script>
    (function() {
        var elements = ["section", "nav", "header", "footer", "audio"];
        for (var i = 0; i < elements.length; i++) {
            document.createElement(elements[i]);
        }
    })();
    </script>

    <%#
      If Rails's Turbolinks is used, the Better Errors page is probably
      rendered in the host app's layout. Let's empty out the styles of the
      host app.
    %>
    <script>
      if (window.Turbolinks) {
          for(var i=0; i < document.styleSheets.length; i++) {
              if(document.styleSheets[i].href)
                  document.styleSheets[i].disabled = true;
          }
          if (window.Turbolinks.controller) {
              // Turbolinks > 5 (see https://github.com/turbolinks/turbolinks/issues/6)
              document.addEventListener("turbolinks:load", function restoreCSS(e) {
                  for(var i=0; i < document.styleSheets.length; i++) {
                      document.styleSheets[i].disabled = false;
                  }
                  document.removeEventListener("turbolinks:load", restoreCSS, false);
              });
          } else {
              document.addEventListener("page:restore", function restoreCSS(e) {
                  for(var i=0; i < document.styleSheets.length; i++) {
                      document.styleSheets[i].disabled = false;
                  }
                  document.removeEventListener("page:restore", restoreCSS, false);
              });
          }
      }
    </script>

    <div class='top'>
        <header class="exception">
            <h2><strong><%= exception_type %></strong> <span>at <%= request_path %></span></h2>
            <p><%= exception_message %></p>
        </header>
    </div>

    <section class="backtrace">
        <nav class="frames">
            <nav class="segmented">
                <a href="#" id="application_frames">Application Frames</a><a href="#" id="all_frames">All Frames</a>
            </nav>
            <ul class="frames">
                <% backtrace_frames.each_with_index do |frame, index| %>
                    <li class="<%= frame.context %>" data-context="<%= frame.context %>" data-index="<%= index %>">
                        <span class='chevron'>&#9656;</span>
                        <i class="icon <%= frame.context %>"></i>
                        <div class="info">
                            <div class="name">
                                <strong><%= frame.class_name %></strong><span class='method'><%= frame.method_name %></span>
                            </div>
                            <div class="location">
                                <span class="filename"><%= frame.pretty_path %></span>, line <span class="line"><%= frame.line %></span>
                            </div>
                        </div>
                    </li>
                <% end %>
            </ul>
        </nav>

        <% backtrace_frames.each_with_index do |frame, index| %>
            <div class="frame_info" id="frame_info_<%= index %>" style="display:none;"></div>
        <% end %>
    </section>
</body>
<script>
(function() {

    var OID = "<%= id %>";

    var previousFrame = null;
    var previousFrameInfo = null;
    var allFrames = document.querySelectorAll("ul.frames li");
    var allFrameInfos = document.querySelectorAll(".frame_info");

    function apiCall(method, opts, cb) {
        var req = new XMLHttpRequest();
        req.open("POST", "//" + window.location.host + <%== uri_prefix.gsub("<", "&lt;").inspect %> + "/__better_errors/" + OID + "/" + method, true);
        req.setRequestHeader("Content-Type", "application/json");
        req.send(JSON.stringify(opts));
        req.onreadystatechange = function() {
            if(req.readyState == 4) {
                var res = JSON.parse(req.responseText);
                cb(res);
            }
        };
    }

    function escapeHTML(html) {
        return html.replace(/&/, "&amp;").replace(/</g, "&lt;");
    }

    function REPL(index) {
        this.index = index;

        var previousCommands = JSON.parse(localStorage.getItem("better_errors_previous_commands"));
        if(previousCommands === null) {
          localStorage.setItem("better_errors_previous_commands", JSON.stringify([]));
          previousCommands = [];
        }

        this.previousCommandOffset = previousCommands.length;
    }

    REPL.all = [];

    REPL.prototype.install = function(containerElement) {
        this.container = containerElement;

        this.promptElement  = this.container.querySelector(".command-line .prompt");
        this.inputElement   = this.container.querySelector("input");
        this.outputElement  = this.container.querySelector(".output");

        var self = this;
        this.inputElement.onkeydown = function(ev) {
            self.onKeyDown(ev);
        };

        this.setPrompt(">>");

        REPL.all[this.index] = this;
    }

    REPL.prototype.focus = function() {
        this.inputElement.focus();
    };

    REPL.prototype.setPrompt = function(prompt) {
        this._prompt = prompt;
        this.promptElement.innerHTML = escapeHTML(prompt);
    };

    REPL.prototype.getInput = function() {
        return this.inputElement.value;
    };

    REPL.prototype.setInput = function(text) {
        this.inputElement.value = text;

        if(this.inputElement.setSelectionRange) {
            // set cursor to end of input
            this.inputElement.setSelectionRange(text.length, text.length);
        }
    };

    REPL.prototype.writeErrorOutput = function(error) {
      this.writeOutput("<pre class='error'>" + error + "</pre>");
    };

    REPL.prototype.writeResultOutput = function(prompt, command, result) {
        this.writeOutput("<h4 class='command'>" + prompt + " "  + command + "</h4>");
        this.writeOutput("<pre class='result'>" + result + "</pre>");
    };

    REPL.prototype.writeOutput = function(content) {
      this.outputElement.className = "output used";
      this.outputElement.innerHTML += content;
      this.outputElement.scrollTop = this.outputElement.scrollHeight;
    };

    REPL.prototype.sendInput = function(line) {
        var self = this;
        apiCall("eval", { "index": this.index, source: line }, function(response) {
            if(response.error) {
                self.writeErrorOutput(response.error);
            }
            self.writeResultOutput(self._prompt, response.highlighted_input, response.result);
            self.setPrompt(response.prompt);
            self.setInput(response.prefilled_input);
        });
    };

    REPL.prototype.onEnterKey = function() {
        var text = this.getInput();
        if(text != "" && text !== undefined) {
            var previousCommands = JSON.parse(localStorage.getItem("better_errors_previous_commands"));
            this.previousCommandOffset = previousCommands.push(text);
            if(previousCommands.length > 100) {
              previousCommands.splice(0, 1);
              this.previousCommandOffset -= 1;
            }
            localStorage.setItem("better_errors_previous_commands", JSON.stringify(previousCommands));
        }
        this.setInput("");
        this.sendInput(text);
    };

    REPL.prototype.onNavigateHistory = function(direction) {
        this.previousCommandOffset += direction;
        var previousCommands = JSON.parse(localStorage.getItem("better_errors_previous_commands"));

        if(this.previousCommandOffset < 0) {
            this.previousCommandOffset = -1;
            this.setInput("");
            return;
        }

        if(this.previousCommandOffset >= previousCommands.length) {
            this.previousCommandOffset = previousCommands.length;
            this.setInput("");
            return;
        }

        this.setInput(previousCommands[this.previousCommandOffset]);
    };

    REPL.prototype.onKeyDown = function(ev) {
        if(ev.keyCode == 13) {
            this.onEnterKey();
        } else if(ev.keyCode == 38 || (ev.ctrlKey && ev.keyCode == 80)) {
            // the user pressed the up arrow or Ctrl-P
            this.onNavigateHistory(-1);
            ev.preventDefault();
            return false;
        } else if(ev.keyCode == 40 || (ev.ctrlKey && ev.keyCode == 78)) {
            // the user pressed the down arrow or Ctrl-N
            this.onNavigateHistory(1);
            ev.preventDefault();
            return false;
        }
    };

    function switchTo(el) {
        if(previousFrameInfo) previousFrameInfo.style.display = "none";
        previousFrameInfo = el;

        el.style.display = "block";

        var replInput = el.querySelector('.be-console input');
        if (replInput) replInput.focus();
    }

    function selectFrameInfo(index) {
        var el = allFrameInfos[index];
        if(el) {
            if (el.loaded) {
                return switchTo(el);
            }

            apiCall("variables", { "index": index }, function(response) {
                el.loaded = true;
                if(response.error) {
                    el.innerHTML = "<h2 class='error'>" + escapeHTML(response.error) + "</h2>";
                    if(response.explanation) {
                      el.innerHTML += "<p class='explanation'>" + escapeHTML(response.explanation) + "</p>";
                    }
                    el.innerHTML += "<p><a target='_new' href='https://github.com/BetterErrors/better_errors'>More about Better Errors</a></p>";
                } else {
                    el.innerHTML = response.html;

                    var repl = el.querySelector(".be-repl .be-console");
                    if(repl) {
                        new REPL(index).install(repl);
                    }
                }
                switchTo(el);
            });
        }
    }

    for(var i = 0; i < allFrames.length; i++) {
        (function(i, el) {
            var el = allFrames[i];
            el.onclick = function() {
                if(previousFrame) {
                    previousFrame.className = "";
                }
                el.className = "selected";
                previousFrame = el;

                selectFrameInfo(el.attributes["data-index"].value);
            };
        })(i);
    }

    // Click the first application frame
    (
      document.querySelector(".frames li.application") ||
      document.querySelector(".frames li")
    ).onclick();

    // This is the second query performed for frames; maybe the 'allFrames' list
    // currently used and this list can be better used to avoid the repetition:
    var applicationFramesCount = document.querySelectorAll(
        "ul.frames li[data-context=application]"
    ).length;

    var applicationFramesButtonIsInstalled = false;
    var applicationFramesButton = document.getElementById("application_frames");
    var allFramesButton = document.getElementById("all_frames");

    // The application frames button only needs to be bound if
    // there are actually any application frames to look at.
    var installApplicationFramesButton = function() {
        applicationFramesButton.onclick = function() {
            allFramesButton.className = "";
            applicationFramesButton.className = "selected";
            for(var i = 0; i < allFrames.length; i++) {
                if(allFrames[i].attributes["data-context"].value == "application") {
                    allFrames[i].style.display = "block";
                } else {
                    allFrames[i].style.display = "none";
                }
            }
            return false;
        };

        applicationFramesButtonIsInstalled = true;
    }

    allFramesButton.onclick = function() {
        if(applicationFramesButtonIsInstalled) {
            applicationFramesButton.className = "";
        }

        allFramesButton.className = "selected";
        for(var i = 0; i < allFrames.length; i++) {
            allFrames[i].style.display = "block";
        }
        return false;
    };

    // If there are no application frames, select the 'All Frames'
    // tab by default.
    if(applicationFramesCount > 0) {
        installApplicationFramesButton();
        applicationFramesButton.onclick();
    } else {
        applicationFramesButton.className = "disabled";
        applicationFramesButton.title = "No application frames available";
        allFramesButton.onclick();
    }
})();
</script>
</html>

<!-- generated by Better Errors in <%= Time.now.to_f - @start_time %> seconds -->
