<!DOCTYPE html>
<html>
<head>
    <title><%= exception.class %> at <%= request_path %></title>
    <style>
    * {
        margin:0;
        padding:0;
    }
    body {
        font-family:Verdana, sans-serif;
        margin:0;
        font-size:13px;
    }
    header {
        padding:32px 32px;
        border-bottom:1px solid #e64c38;
        background-color: #ffe5e7;
        background-image: -webkit-gradient(linear, left top, left bottom, from(#ffe5e7), to(#ffb2b8)); /* Safari 4+, Chrome */
        background-image: -webkit-linear-gradient(top, #ffe5e7, #ffb2b8); /* Chrome 10+, Safari 5.1+, iOS 5+ */
        background-image:    -moz-linear-gradient(top, #ffe5e7, #ffb2b8); /* Firefox 3.6-15 */
        background-image:      -o-linear-gradient(top, #ffe5e7, #ffb2b8); /* Opera 11.10-12.00 */
        background-image:         linear-gradient(to bottom, #ffe5e7, #ffb2b8); /* Firefox 16+, IE10, Opera 12.50+ */
    }
    h2 {
        font-weight:normal;
        margin:0;
        margin-bottom:16px;
    }
    h2 span {
        color:#666666;
    }
    header table {
        border-collapse:collapse;
    }
    header table th {
        text-align:right;
        font-weight:bold;
        padding-right:12px;
    }
    header table th, header table td {
        padding:4px 6px;
    }
    nav {
        display:block;
        padding:12px 12px;
        border-bottom:1px solid #000000;
        background-color: #444444;
        background-image: -webkit-gradient(linear, left top, left bottom, from(#444444), to(#222222)); /* Safari 4+, Chrome */
        background-image: -webkit-linear-gradient(top, #444444, #222222); /* Chrome 10+, Safari 5.1+, iOS 5+ */
        background-image:    -moz-linear-gradient(top, #444444, #222222); /* Firefox 3.6-15 */
        background-image:      -o-linear-gradient(top, #444444, #222222); /* Opera 11.10-12.00 */
        background-image:         linear-gradient(to bottom, #444444, #222222); /* Firefox 16+, IE10, Opera 12.50+ */
    }
    nav a {
        color:#ffffff;
        text-decoration:none;
        padding:4px 16px;
        border-radius:16px;
    }
    nav a:hover {
        background-color: #666666;
        background-image: -webkit-gradient(linear, left top, left bottom, from(#666666), to(#444444)); /* Safari 4+, Chrome */
        background-image: -webkit-linear-gradient(top, #666666, #444444); /* Chrome 10+, Safari 5.1+, iOS 5+ */
        background-image:    -moz-linear-gradient(top, #666666, #444444); /* Firefox 3.6-15 */
        background-image:      -o-linear-gradient(top, #666666, #444444); /* Opera 11.10-12.00 */
        background-image:         linear-gradient(to bottom, #666666, #444444); /* Firefox 16+, IE10, Opera 12.50+ */
    }
    nav a.selected {
        color:#000000;
        background-color: #efefef;
        background-image: -webkit-gradient(linear, left top, left bottom, from(#efefef), to(#cfcfcf)); /* Safari 4+, Chrome */
        background-image: -webkit-linear-gradient(top, #efefef, #cfcfcf); /* Chrome 10+, Safari 5.1+, iOS 5+ */
        background-image:    -moz-linear-gradient(top, #efefef, #cfcfcf); /* Firefox 3.6-15 */
        background-image:      -o-linear-gradient(top, #efefef, #cfcfcf); /* Opera 11.10-12.00 */
        background-image:         linear-gradient(to bottom, #efefef, #cfcfcf); /* Firefox 16+, IE10, Opera 12.50+ */
    }
    .frames {
        width:50%;
        float:left;
    }
    .frames li {
        list-style:none;
        display:block;
        padding:12px;
        overflow:hidden;
        cursor:pointer;
        background-color: #f4f7ff;
        background-image: -webkit-gradient(linear, left top, left bottom, from(#f4f7ff), to(#e4ebfe)); /* Safari 4+, Chrome */
        background-image: -webkit-linear-gradient(top, #f4f7ff, #e4ebfe); /* Chrome 10+, Safari 5.1+, iOS 5+ */
        background-image:    -moz-linear-gradient(top, #f4f7ff, #e4ebfe); /* Firefox 3.6-15 */
        background-image:      -o-linear-gradient(top, #f4f7ff, #e4ebfe); /* Opera 11.10-12.00 */
        background-image:         linear-gradient(to bottom, #f4f7ff, #e4ebfe); /* Firefox 16+, IE10, Opera 12.50+ */
        border-bottom:1px solid #cccccc;
    }
    .frames li:hover, .frames li.selected {
        background-color: #e4ebfe;
        background-image: -webkit-gradient(linear, left top, left bottom, from(#e4ebfe), to(#c2d3fe)); /* Safari 4+, Chrome */
        background-image: -webkit-linear-gradient(top, #e4ebfe, #c2d3fe); /* Chrome 10+, Safari 5.1+, iOS 5+ */
        background-image:    -moz-linear-gradient(top, #e4ebfe, #c2d3fe); /* Firefox 3.6-15 */
        background-image:      -o-linear-gradient(top, #e4ebfe, #c2d3fe); /* Opera 11.10-12.00 */
        background-image:         linear-gradient(to bottom, #e4ebfe, #c2d3fe); /* Firefox 16+, IE10, Opera 12.50+ */
    }
    .frames .name, .frame_info h2.name {
        font-family:Monaco, Incosolata, Consolas, monospace;
        font-size:14px;
        margin-bottom:4px;
    }
    .location {
        color:#888888;
    }
    .location .filename, .location .line {
        color:#333333;
    }
    .frame_info {
        background-color:#efefef;
        border-bottom:1px solid #cccccc;
        float:left;
        width:50%;
    }
    .frame_info > * {
        margin:16px;
    }
    .frame_info h2 {
        font-family:Monaco, Incosolata, Consolas, monospace;
    }
    .frame_info .code {
        font-family:Monaco, Incosolata, Consolas, monospace;
        background-color:#ffffff;
        border:1px solid #cccccc;
        border-collapse:collapse;
        overflow:auto;
    }
    .frame_info .code pre:nth-child(2n+1) {
        background-color:#f9f9f9;
    }
    .frame_info .code pre:nth-child(2n) {
        background-color:#f3f3f3;
    }
    .frame_info .code pre.highlight {
        background-color:#ffeaaa;
    }
    .frame_info .code .line {
        text-align:right;
        padding-right:12px;
        padding-left:0px;
    }
    code {
        background-color:#f0f0f0;
        padding:2px 4px;
        border:1px solid #d0d0d0;
    }
    h3 {
        font-weight:normal;
        border-top:1px solid #cccccc;
        padding-top:16px;
        margin-bottom:16px;
    }
    .var_table {
        border-collapse:collapse;
    }
    .var_table td {
        padding:8px;
    }
    .var_table td.name {
        font-style:italic;
    }
    .var_table tr {
        border-bottom:1px solid #cccccc;
    }
    .repl .console {
        background-color:#ffffff;
        padding:2px 4px;
        border:1px solid #d0d0d0;
        margin-bottom:8px;
        font-family:monospace;
    }
    .repl pre {
        font-size:12px;
        white-space:pre-wrap;
        max-height:400px;
        overflow:auto;
    }
    .repl .prompt {
        font-size:12px;
        position:relative;
    }
    .repl input {
        font-size:12px;
        border:none;
        font-family:monospace;
        outline:none;
        padding:0px;
        position:absolute;
        left:20px;
        right:0px;
    }
    </style>
</head>
<body>
    <header>
        <h2><%= exception.class %> <span>at <%= request_path %></span></h2>
        <table>
            <tr>
                <th>Message</th>
                <td><%= exception.message %></td>
            </tr>
            <% if backtrace_frames.any? %>
                <tr>
                    <th>File</th>
                    <td><%= backtrace_frames.first.filename %></td>
                </tr>
                <tr>
                    <th>Line</th>
                    <td><%= backtrace_frames.first.line %></td>
                </tr>
            <% end %>
        </table>
    </header>
    <nav>
        <a href="#" id="application_frames">Application Frames</a>
        <a href="#" id="all_frames">All Frames</a>
    </nav>
    <section class="backtrace">
        <ul class="frames">
            <% backtrace_frames.each_with_index do |frame, index| %>
                <li
                    data-context="<%= frame.context %>"
                    data-full-filename="<%= frame.filename %>"
                    data-filename="<%= frame.pretty_path %>"
                    data-line="<%= frame.line %>"
                    data-name="<%= frame.name %>"
                    data-index="<%= index %>"
                >
                    <div class="name"><%= frame.name %></div>
                    <div class="location"><span class="filename"><%= frame.pretty_path %></span>, line <span class="line"><%= frame.line %></span></div>
                </li>
            <% end %>
        </ul>
        <% backtrace_frames.each_with_index do |frame, index| %>
            <div class="frame_info" id="frame_info_<%= index %>" style="display:none;">
                <h2 class="name"><%= frame.name %></h2>
                <div class="location"><span class="filename"><%= frame.pretty_path %></span>, line <span class="line"><%= frame.line %></span></div>
                <%== highlighted_code_block frame %>
                
                <% if BetterErrors.binding_of_caller_available? %>
                    <div class="repl">
                        <h3>REPL</h3>
                        <div class="console">
                            <pre></pre>
                            <div class="prompt">&gt;&gt; <input/></div>
                        </div>
                    </div>

                    <div class="variable_info"></div>
                <% else %>
                    <h3>Advanced features unavailable</h3>
                    <p class="error">
                        You must add <code>gem "binding_of_caller"</code> to your Gemfile to enable the REPL and local/instance variable inspection.
                    </p>
                <% end %>
            </div>
        <% end %>
        <div style="clear:both"></div>
    </section>
</body>
<script>
(function() {
    var oid = <%== object_id.to_s.inspect %>;
    
    var previous = null;
    var previousFrameInfo = null;
    var frames = document.querySelectorAll("ul.frames li");
    var frameInfos = document.querySelectorAll(".frame_info");
    
    var header = document.querySelector("header");
    var headerHeight = header.offsetHeight;
    
    var previousCommands = [];
    var previousCommandOffset = 0;

    apiCall = function(method, opts, cb) {
        var req = new XMLHttpRequest();
        req.open("POST", "/__better_errors/" + oid + "/" + method, true);
        req.setRequestHeader("Content-Type", "application/json");
        req.send(JSON.stringify(opts));
        req.onreadystatechange = function() {
            if(req.readyState == 4) {
                var res = JSON.parse(req.responseText);
                cb(res);
            }
        };
    }
    
    function escapeHTML(html) {
        return html.replace(/&/, "&amp;").replace(/</g, "&lt;");
    }
    
    function selectFrameInfo(index) {
        var el = document.getElementById("frame_info_" + index);
        
        var varInfo = el.querySelector(".variable_info");
        if(varInfo && varInfo.innerHTML == "") {
            apiCall("variables", { "index": index }, function(response) {
                if(response.error) {
                    varInfo.innerHTML = "<span class='error'>" + escapeHTML(response.error) + "</span>";
                } else {
                    varInfo.innerHTML = response.html;
                }
            });
        }
        
        if(previousFrameInfo) {
            previousFrameInfo.style.display = "none";
        }
        previousFrameInfo = el;
        previousFrameInfo.style.display = "block";
        
        var replInput = el.querySelector(".repl input");
        if(replInput) {
            replInput.focus();
        }
    }

    function populateCommandPrompt(input, newOffset, bound) {
        var index = previousCommands.length + newOffset;
        var previousCommand;

        if(index < previousCommands.length && index >= 0) {
            // the new index is within the bounds of the 
            // commands array, so grab the previously
            // entered command.
            previousCommandOffset = newOffset;
            previousCommand = previousCommands[index];
        }else{
            // the new index isn't within the bounds
            // of the array.
            previousCommand = "";

            if(index == bound) {
                // set the offset just outside only
                // if we're at the bounds of the array.
                // this is so we only get one 'blank' 
                // command and don't continue moving
                // the offset when we shouldn't. 
                previousCommandOffset = newOffset;
            }
        }
        // now set the input's text to the previous command
        // in the list. 
        input.value = previousCommand; 
    }
    
    for(var i = 0; i < frames.length; i++) {
        (function(index, el, frameInfo) {
            el.onclick = function() {
                if(previous) {
                    previous.className = "";
                }
                el.className = "selected";
                previous = el;
                
                selectFrameInfo(el.attributes["data-index"].value);
            };
            var replPre = frameInfo.querySelector(".repl pre");
            var replInput = frameInfo.querySelector(".repl input");
            if(replInput) {
                replInput.onkeydown = function(ev) {
                    if(ev.keyCode == 13) {
                        // reset the command up/down arrow offset.
                        previousCommandOffset = 0;

                        var text = replInput.value;

                        if(text != "" && text !== undefined) {
                            // push this command on to the previous commands list.
                            previousCommands.push(text);
                        }

                        replInput.value = "";
                        apiCall("eval", { "index": index, source: text }, function(response) {
                            replPre.innerHTML += ">> " + response.highlighted_input + "\n";
                            if(response.error) {
                                replPre.innerHTML += "!! " + escapeHTML(response.error) + "\n";
                            } else {
                                replPre.innerHTML += "=> " + escapeHTML(response.result) + "\n";
                            }
                            replPre.scrollTop = replPre.scrollHeight;
                        });
                    }else if(ev.keyCode == 38) {
                        // the user pressed the up arrow.
                        populateCommandPrompt(replInput, previousCommandOffset - 1, -1);     
                    }else if(ev.keyCode == 40) {
                        // the user pressed the down arrow.
                        populateCommandPrompt(replInput, previousCommandOffset + 1, previousCommands.length);
                    }
                };
            }
        })(i, frames[i], frameInfos[i]);
    }
    
    document.querySelector(".frames li:first-child").click();
    
    var applicationFrames = document.getElementById("application_frames");
    var allFrames = document.getElementById("all_frames");
    
    applicationFrames.onclick = function() {
        allFrames.className = "";
        applicationFrames.className = "selected";
        for(var i = 0; i < frames.length; i++) {
            if(frames[i].attributes["data-context"].value == "application") {
                frames[i].style.display = "block";
            } else {
                frames[i].style.display = "none";
            }
        }
        return false;
    };
    
    allFrames.onclick = function() {
        applicationFrames.className = "";
        allFrames.className = "selected";
        for(var i = 0; i < frames.length; i++) {
            frames[i].style.display = "block";
        }
        return false;
    };
    
    applicationFrames.click();
})();
</script>
</html>
<!-- generated by Better Errors in <%= Time.now.to_f - @start_time %> seconds -->
